/*
 * ProgressBarDialog.java
 *
 * Created on 2010.06.01., 20:41:32
 */

package com.rosamez.jdvdkat;

import java.awt.Frame;
import org.jdesktop.application.Action;

/**
 *
 * @author Szabolcs Kurdi
 */
public class ProgressBarDialog extends javax.swing.JDialog {
    final protected ProgressBarDialog self = this;
    protected Frame parentPanel;
    protected JDvdKatApp app;
    private int progressBarValue = 0;

    /** Creates new form ProgressBarDialog */
    public ProgressBarDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        parentPanel = parent;
        app = JDvdKatApp.getApplication();
        initComponents();
        jProgressBar.setStringPainted(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar = new javax.swing.JProgressBar();
        jLabelMessage = new javax.swing.JLabel();
        jButtonAction = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jProgressBar.setName("jProgressBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.rosamez.jdvdkat.JDvdKatApp.class).getContext().getResourceMap(ProgressBarDialog.class);
        jLabelMessage.setText(resourceMap.getString("jLabelMessage.text")); // NOI18N
        jLabelMessage.setName("jLabelMessage"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.rosamez.jdvdkat.JDvdKatApp.class).getContext().getActionMap(ProgressBarDialog.class, this);
        jButtonAction.setAction(actionMap.get("close")); // NOI18N
        jButtonAction.setText(resourceMap.getString("jButtonAction.text")); // NOI18N
        jButtonAction.setName("jButtonAction"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jLabelMessage)
                    .addComponent(jButtonAction, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAction)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProgressBarDialog dialog = new ProgressBarDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Action
    public void close() {
        this.onClose();
        this.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAction;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JProgressBar jProgressBar;
    // End of variables declaration//GEN-END:variables

    protected void onClose() {

    }

    protected void setMessage(String msg) {
        jLabelMessage.setText(msg);
    }

    protected void enableActionButton() {
        jButtonAction.setEnabled(true);
    }
    
    protected void disableActionButton() {
        jButtonAction.setEnabled(false);
    }

    protected void setProgressMax(int max) {
        jProgressBar.setMaximum(max);
    }

    protected void increaseProgress() {
        jProgressBar.setValue(++progressBarValue);
    }

    protected void maxOutProgress() {
        jProgressBar.setValue(jProgressBar.getMaximum());
    }

    protected void setProgressVal(int p) {
        jProgressBar.setValue(p);
    }

    /**
     * probably it's just me, but running the modal
     * window without locking up the gui seems a bit sucky...
     */
    protected void runModal() {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                self.setVisible(true);
            }
        });
        t.start();
    }

}
