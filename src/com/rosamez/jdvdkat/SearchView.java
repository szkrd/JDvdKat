/*
 * SearchFrameView.java
 *
 * Created on 2010.06.12., 10:30:24
 */
package com.rosamez.jdvdkat;

import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang.StringEscapeUtils;
import org.jdesktop.application.Action;

/**
 * search view and search related functions
 * @author Szabolcs Kurdi
 */
public class SearchView extends javax.swing.JFrame implements PropertyChangeListener {

    private SearchView self = this;
    private JDvdKatApp app = JDvdKatApp.getApplication();
    private SearchTableNodesController searchTableNodesController;
    private ArrayList<SearchQueryItem> queries = app.config.getQueries();
    private String paramSubst = "${PARAM}$";
    private boolean editorVisible = false;
    private int activeQueryIdx;
    private SearchViewWorker searchTask;
    private SearchViewProperties guiProps;

    /** Creates new form SearchFrameView */
    public SearchView() {
        initComponents();
        searchTableNodesController = new SearchTableNodesController(jTableResults);

        guiProps = app.config.getSearchViewProperties();
        searchTableNodesController.setColWidths(guiProps.colWidths);
        if (guiProps.left == 0 && guiProps.top == 0) {
            this.setLocationRelativeTo(null);
        } else {
            this.setLocation(guiProps.left, guiProps.top);
        }
        if (guiProps.width > 0 && guiProps.height > 0) {
            this.setSize(guiProps.width, guiProps.height);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelSearchFor = new javax.swing.JLabel();
        jTextFieldSearchFor = new javax.swing.JTextField();
        jLabelActiveQuery = new javax.swing.JLabel();
        jComboBoxAvailQueries = new javax.swing.JComboBox();
        jButtonSearch = new javax.swing.JButton();
        jCheckBoxInSelFile = new javax.swing.JCheckBox();
        jButtonManageProfiles = new javax.swing.JToggleButton();
        jPanelEditorForm = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaEditorXQuery = new javax.swing.JTextArea();
        jLabelEditorPName = new javax.swing.JLabel();
        jTextFieldEditorPName = new javax.swing.JTextField();
        jLabelEditorXQuery = new javax.swing.JLabel();
        jButtonEditorSave = new javax.swing.JButton();
        jButtonEditorRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResults = new javax.swing.JTable();
        jPanelFooter = new javax.swing.JPanel();
        jCheckBoxAutoJump = new javax.swing.JCheckBox();
        jLabelExecTimeText = new javax.swing.JLabel();
        jLabelExecTimeNum = new javax.swing.JLabel();
        jLabelItemsFoundText = new javax.swing.JLabel();
        jLabelItemsFoundNum = new javax.swing.JLabel();
        jButtonClose = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.rosamez.jdvdkat.JDvdKatApp.class).getContext().getResourceMap(SearchView.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jPanel1.setName("jPanel1"); // NOI18N

        jLabelSearchFor.setText(resourceMap.getString("jLabelSearchFor.text")); // NOI18N
        jLabelSearchFor.setName("jLabelSearchFor"); // NOI18N

        jTextFieldSearchFor.setName("jTextFieldSearchFor"); // NOI18N
        jTextFieldSearchFor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldSearchForKeyPressed(evt);
            }
        });

        jLabelActiveQuery.setText(resourceMap.getString("jLabelActiveQuery.text")); // NOI18N
        jLabelActiveQuery.setName("jLabelActiveQuery"); // NOI18N

        jComboBoxAvailQueries.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxAvailQueries.setName("jComboBoxAvailQueries"); // NOI18N
        jComboBoxAvailQueries.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAvailQueriesItemStateChanged(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.rosamez.jdvdkat.JDvdKatApp.class).getContext().getActionMap(SearchView.class, this);
        jButtonSearch.setAction(actionMap.get("search")); // NOI18N
        jButtonSearch.setText(resourceMap.getString("jButtonSearch.text")); // NOI18N
        jButtonSearch.setName("jButtonSearch"); // NOI18N

        jCheckBoxInSelFile.setMnemonic('o');
        jCheckBoxInSelFile.setText(resourceMap.getString("jCheckBoxInSelFile.text")); // NOI18N
        jCheckBoxInSelFile.setName("jCheckBoxInSelFile"); // NOI18N

        jButtonManageProfiles.setAction(actionMap.get("showHideEditor")); // NOI18N
        jButtonManageProfiles.setText(resourceMap.getString("jButtonManageProfiles.text")); // NOI18N
        jButtonManageProfiles.setName("jButtonManageProfiles"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSearchFor)
                            .addComponent(jLabelActiveQuery))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxAvailQueries, javax.swing.GroupLayout.Alignment.TRAILING, 0, 430, Short.MAX_VALUE)
                            .addComponent(jTextFieldSearchFor, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                            .addComponent(jCheckBoxInSelFile)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonManageProfiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearch)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearchFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSearchFor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelActiveQuery)
                    .addComponent(jComboBoxAvailQueries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxInSelFile)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearch)
                    .addComponent(jButtonManageProfiles))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelEditorForm.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanelEditorForm.setName("jPanelEditorForm"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextAreaEditorXQuery.setColumns(20);
        jTextAreaEditorXQuery.setLineWrap(true);
        jTextAreaEditorXQuery.setRows(3);
        jTextAreaEditorXQuery.setTabSize(4);
        jTextAreaEditorXQuery.setName("jTextAreaEditorXQuery"); // NOI18N
        jScrollPane1.setViewportView(jTextAreaEditorXQuery);

        jLabelEditorPName.setText(resourceMap.getString("jLabelEditorPName.text")); // NOI18N
        jLabelEditorPName.setName("jLabelEditorPName"); // NOI18N

        jTextFieldEditorPName.setName("jTextFieldEditorPName"); // NOI18N

        jLabelEditorXQuery.setText(resourceMap.getString("jLabelEditorXQuery.text")); // NOI18N
        jLabelEditorXQuery.setName("jLabelEditorXQuery"); // NOI18N

        jButtonEditorSave.setAction(actionMap.get("saveOrAddQuery")); // NOI18N
        jButtonEditorSave.setText(resourceMap.getString("jButtonEditorSave.text")); // NOI18N
        jButtonEditorSave.setName("jButtonEditorSave"); // NOI18N

        jButtonEditorRemove.setAction(actionMap.get("removeQuery")); // NOI18N
        jButtonEditorRemove.setText(resourceMap.getString("jButtonEditorRemove.text")); // NOI18N
        jButtonEditorRemove.setName("jButtonEditorRemove"); // NOI18N

        javax.swing.GroupLayout jPanelEditorFormLayout = new javax.swing.GroupLayout(jPanelEditorForm);
        jPanelEditorForm.setLayout(jPanelEditorFormLayout);
        jPanelEditorFormLayout.setHorizontalGroup(
            jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEditorFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEditorPName)
                    .addComponent(jLabelEditorXQuery))
                .addGap(18, 18, 18)
                .addGroup(jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEditorFormLayout.createSequentialGroup()
                        .addComponent(jButtonEditorRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEditorSave))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addComponent(jTextFieldEditorPName, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelEditorFormLayout.setVerticalGroup(
            jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEditorFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEditorXQuery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEditorPName)
                    .addComponent(jTextFieldEditorPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEditorFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEditorSave)
                    .addComponent(jButtonEditorRemove))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTableResults.setAutoCreateRowSorter(true);
        jTableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableResults.setFillsViewportHeight(true);
        jTableResults.setIntercellSpacing(new java.awt.Dimension(0, 0));
        jTableResults.setName("jTableResults"); // NOI18N
        jTableResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableResults.getTableHeader().setReorderingAllowed(false);
        jTableResults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableResultsMouseClicked(evt);
            }
        });
        jTableResults.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableResultsKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTableResults);
        jTableResults.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableResults.columnModel.title0")); // NOI18N
        jTableResults.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableResults.columnModel.title1")); // NOI18N
        jTableResults.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTableResults.columnModel.title2")); // NOI18N
        jTableResults.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTableResults.columnModel.title3")); // NOI18N
        jTableResults.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTableResults.columnModel.title4")); // NOI18N
        jTableResults.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("jTableResults.columnModel.title5")); // NOI18N

        jPanelFooter.setName("jPanelFooter"); // NOI18N

        jCheckBoxAutoJump.setMnemonic('j');
        jCheckBoxAutoJump.setText(resourceMap.getString("jCheckBoxAutoJump.text")); // NOI18N
        jCheckBoxAutoJump.setName("jCheckBoxAutoJump"); // NOI18N
        jCheckBoxAutoJump.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxAutoJumpStateChanged(evt);
            }
        });

        jLabelExecTimeText.setText(resourceMap.getString("jLabelExecTimeText.text")); // NOI18N
        jLabelExecTimeText.setName("jLabelExecTimeText"); // NOI18N

        jLabelExecTimeNum.setText(resourceMap.getString("jLabelExecTimeNum.text")); // NOI18N
        jLabelExecTimeNum.setName("jLabelExecTimeNum"); // NOI18N

        jLabelItemsFoundText.setText(resourceMap.getString("jLabelItemsFoundText.text")); // NOI18N
        jLabelItemsFoundText.setName("jLabelItemsFoundText"); // NOI18N

        jLabelItemsFoundNum.setText(resourceMap.getString("jLabelItemsFoundNum.text")); // NOI18N
        jLabelItemsFoundNum.setName("jLabelItemsFoundNum"); // NOI18N

        javax.swing.GroupLayout jPanelFooterLayout = new javax.swing.GroupLayout(jPanelFooter);
        jPanelFooter.setLayout(jPanelFooterLayout);
        jPanelFooterLayout.setHorizontalGroup(
            jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFooterLayout.createSequentialGroup()
                .addComponent(jCheckBoxAutoJump)
                .addGap(18, 18, 18)
                .addGroup(jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFooterLayout.createSequentialGroup()
                        .addComponent(jLabelItemsFoundText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelItemsFoundNum, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                    .addGroup(jPanelFooterLayout.createSequentialGroup()
                        .addComponent(jLabelExecTimeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelExecTimeNum, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelFooterLayout.setVerticalGroup(
            jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFooterLayout.createSequentialGroup()
                .addGroup(jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAutoJump)
                    .addComponent(jLabelExecTimeText)
                    .addComponent(jLabelExecTimeNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelItemsFoundText)
                    .addComponent(jLabelItemsFoundNum)))
        );

        jButtonClose.setAction(actionMap.get("close")); // NOI18N
        jButtonClose.setText(resourceMap.getString("jButtonClose.text")); // NOI18N
        jButtonClose.setName("jButtonClose"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jPanelEditorForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanelFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelEditorForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClose))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxAutoJumpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxAutoJumpStateChanged
        searchTableNodesController.allowMainWinJump(jCheckBoxAutoJump.isSelected());
    }//GEN-LAST:event_jCheckBoxAutoJumpStateChanged

    private void jTextFieldSearchForKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchForKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            search();
            evt.consume();
        } else if (keyCode == KeyEvent.VK_DOWN) {
            jTableResults.requestFocusInWindow();
            evt.consume();
        }
}//GEN-LAST:event_jTextFieldSearchForKeyPressed

    private void jComboBoxAvailQueriesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAvailQueriesItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            activeQueryIdx = jComboBoxAvailQueries.getSelectedIndex();
            SearchQueryItem q = queries.get(activeQueryIdx);
            jTextAreaEditorXQuery.setText(q.query);
            jTextFieldEditorPName.setText(q.name);
        }
    }//GEN-LAST:event_jComboBoxAvailQueriesItemStateChanged

    /**
     * on hide form, save some of its properties, since netbeans
     * refused to do so...
     * @param evt
     */
    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        guiProps.left = this.getLocation().x;
        guiProps.top = this.getLocation().y;
        guiProps.width = this.getSize().width;
        guiProps.height = this.getSize().height;
        guiProps.colWidths = searchTableNodesController.getColWidths();
        app.config.saveSearchViewProperties(guiProps);
    }//GEN-LAST:event_formComponentHidden

    /**
     * manage some of the keypresses on the search lister
     * (home, end, tabbing, enter etc.)
     * @param evt
     */
    private void jTableResultsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableResultsKeyPressed
        boolean hasShift = evt.isShiftDown();
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_TAB && hasShift) {
            jTextFieldSearchFor.requestFocusInWindow();
            evt.consume();
        } else if (keyCode == KeyEvent.VK_TAB && !hasShift) {
            jCheckBoxAutoJump.requestFocusInWindow();
            evt.consume();
        } else if (keyCode == KeyEvent.VK_HOME) {
            searchTableNodesController.gotoFirstNode();
            evt.consume();
        } else if (keyCode == KeyEvent.VK_END) {
            searchTableNodesController.gotoLastNode();
            evt.consume();
        }
    }//GEN-LAST:event_jTableResultsKeyPressed

    private void jTableResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableResultsMouseClicked
        if (evt.getClickCount() == 2) {
            searchTableNodesController.doWinJump();
        }
    }//GEN-LAST:event_jTableResultsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SearchView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonEditorRemove;
    private javax.swing.JButton jButtonEditorSave;
    private javax.swing.JToggleButton jButtonManageProfiles;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxAutoJump;
    private javax.swing.JCheckBox jCheckBoxInSelFile;
    private javax.swing.JComboBox jComboBoxAvailQueries;
    private javax.swing.JLabel jLabelActiveQuery;
    private javax.swing.JLabel jLabelEditorPName;
    private javax.swing.JLabel jLabelEditorXQuery;
    private javax.swing.JLabel jLabelExecTimeNum;
    private javax.swing.JLabel jLabelExecTimeText;
    private javax.swing.JLabel jLabelItemsFoundNum;
    private javax.swing.JLabel jLabelItemsFoundText;
    private javax.swing.JLabel jLabelSearchFor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelEditorForm;
    private javax.swing.JPanel jPanelFooter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableResults;
    private javax.swing.JTextArea jTextAreaEditorXQuery;
    private javax.swing.JTextField jTextFieldEditorPName;
    private javax.swing.JTextField jTextFieldSearchFor;
    // End of variables declaration//GEN-END:variables

    public void initShow() {
        init();
        this.setVisible(true);
        jTextFieldSearchFor.requestFocusInWindow();
    }

    /**
     * temporary fix; Netbeans 6.8 vs mnemonics (+no I18N)
     */
    private void fixNetbeansMnemonics() {
        jButtonManageProfiles.setMnemonic(KeyEvent.VK_M);
        jButtonSearch.setMnemonic(KeyEvent.VK_S);
        jButtonClose.setMnemonic(KeyEvent.VK_C);
        jCheckBoxAutoJump.setMnemonic(KeyEvent.VK_J);
        jButtonEditorRemove.setMnemonic(KeyEvent.VK_R);
        jButtonEditorSave.setMnemonic(KeyEvent.VK_A);
    }

    private void init() {
        jPanelEditorForm.setVisible(editorVisible);
        populateAvailQueries();
        fixNetbeansMnemonics();
        jTextFieldEditorPName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                self.onJTextFieldEditorPNameChange();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                self.onJTextFieldEditorPNameChange();
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                self.onJTextFieldEditorPNameChange();
            }
        });

        // TEST
        //jTextFieldSearchFor.setText("'");
    }

    /**
     * editor name field on change manage the remove button
     * (only allow removal of existing queries, disable btn otherwise)
     */
    private void onJTextFieldEditorPNameChange() {
        String text = jTextFieldEditorPName.getText().trim();
        jButtonEditorRemove.setEnabled(false);
        for (SearchQueryItem queryItem : queries) {
            if (queryItem.name.equals(text)) {
                jButtonEditorRemove.setEnabled(true);
                break;
            }
        }
    }

    /**
     * fill the available queries dropdown
     */
    private void populateAvailQueries() {
        jComboBoxAvailQueries.removeAllItems();
        for (SearchQueryItem queryItem : queries) {
            jComboBoxAvailQueries.addItem(queryItem.name);
        }
    }

    /**
     * get the active query (either from the arraylist or from the textarea)
     * @return
     */
    private String getActiveQuery() {
        String ret = "";
        if (!editorVisible) {
            int idx = jComboBoxAvailQueries.getSelectedIndex();
            ret = queries.get(idx).query;
        } else {
            ret = jTextAreaEditorXQuery.getText();
        }
        return ret;
    }

    /**
     * toggle query editor panel
     */
    @Action
    public void showHideEditor() {
        boolean visible = jPanelEditorForm.isVisible();
        if (visible) {
            jPanelEditorForm.setVisible(false);
            editorVisible = false;
        } else {
            jPanelEditorForm.setVisible(true);
            editorVisible = true;
        }
    }

    /**
     * hide window
     */
    @Action
    public void close() {
        this.setVisible(false);
    }
    
    /**
     * the main search method
     */
    @Action
    public void search() {
        String query = getActiveQuery();
        String param = jTextFieldSearchFor.getText().trim();
        String selFile = "";

        // don't fry the db
        if ("".equals(param)) {
            return;
        }
        jButtonSearch.setEnabled(false);

        // selFile is either the xml file or an empty string (search in all)
        if (jCheckBoxInSelFile.isSelected()) {
            selFile = app.mainWindow.getSelectedFile();
        }

        // set internal winjump prop, do search
        param = StringEscapeUtils.escapeXml(param);
        query = query.replace(paramSubst, param);
        searchTableNodesController.allowMainWinJump(jCheckBoxAutoJump.isSelected());

        // call the bgsearch
        jLabelExecTimeNum.setText("...");
        jLabelItemsFoundNum.setText("...");
        searchTask = new SearchViewWorker(searchTableNodesController, selFile, query);
        searchTask.addPropertyChangeListener((PropertyChangeListener) this);
        searchTask.execute();
    }

    /**
     * callback for bg search (SearchViewWorker)
     * @param resNum
     */
    private void onSearchFinish(int resNum) {
        // print the execution time
        NumberFormat formatter = new DecimalFormat("#0.00");
        String time = formatter.format(new Float(((Long)searchTableNodesController.lastRunTime).floatValue() / 1000000000));
        jLabelExecTimeNum.setText(time);
        jLabelItemsFoundNum.setText(String.valueOf(resNum));
        jButtonSearch.setEnabled(true);

        // show message if no results
        if (resNum == 0) {
            JOptionPane.showMessageDialog(
                    this,
                    "No results.",
                    "Done",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * remove a query from the queries arraylist and from the dropdown
     * (one query must remain though)
     */
    @Action
    public void removeQuery() {
        String text = jTextFieldEditorPName.getText().trim();
        if (queries.size() == 1) {
            JOptionPane.showMessageDialog(
                    this,
                    "You must have at least one query remaining.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        int sel = getQueryIdxByName(text);
        if (sel > -1) {
            queries.remove(sel);
        }
        app.config.saveQueries(queries);
        populateAvailQueries();
    }

    /**
     * modify the query if its name already exists, otherwise
     * add as new to the end of the queries arraylist; refresh dropdown.
     */
    @Action
    public void saveOrAddQuery() {
        String text = jTextFieldEditorPName.getText().trim();
        int sel = getQueryIdxByName(text);
        String cleanedText = jTextAreaEditorXQuery.getText().trim().replaceAll("[\t\r\n]", "");
        if (sel > -1) {
            queries.get(sel).name = text;
            queries.get(sel).query = cleanedText;
        } else {
            SearchQueryItem newQuery = new SearchQueryItem();
            newQuery.name = text;
            newQuery.query = cleanedText;
            queries.add(newQuery);
            sel = queries.size() - 1;
        }
        app.config.saveQueries(queries);
        populateAvailQueries();
        jComboBoxAvailQueries.setSelectedIndex(sel);
    }

    /**
     * get index of query from the queries arraylist
     * @param text
     * @return
     */
    private int getQueryIdxByName(String text) {
        for (int i = 0; i < queries.size(); i++) {
            SearchQueryItem queryItem = queries.get(i);
            if (queryItem.name.equals(text)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * pipe for the background searcher - calls back on onSearchFinish
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String message = evt.getPropertyName();
        Integer searchCount = evt.getNewValue() instanceof Integer ? (Integer) evt.getNewValue() : null;
        if ("done".equals(message) && searchTask.isDone()) {
            onSearchFinish(searchCount);
        }
    }
}
